sum(grepl("Other", df1$justification)),
sum(grepl("No justification", df1$justification))
)
)
# combine all quality factors into a single dataframe
t_qual <- bind_rows(table(df1$match_factor) %>% as.data.frame(),
table(df1$error_factor) %>% as.data.frame(),
table(df1$mult_compare_factor) %>% as.data.frame(),
justification
) %>%
rowwise() %>%
mutate(point = point_percent(ci_calc(Freq, denom))) %>%
mutate(ci = ci_percent(ci_calc(Freq, denom))) %>%
ungroup()
# index for kable function
r1 <- nlevels(df1$match_factor)
r2 <- r1 + nlevels(df1$error_factor)
r3 <- r2 + nlevels(df1$mult_compare_factor)
r4 <- r3 + nrow(justification)
# replace the ci for the one element with 0 hits with NA
i <- grepl("- <1%", t_qual$ci) %>%
which()
t_qual$ci[i] <- "(NA)"
colnames(t_qual) <- c("Quality measure",
paste0("N=", denom),
"Percent",
"(95% CI)"
)
# Chunk 14
knitr::kable(t_qual,
caption = "Table 4. Measures of quality of the sample size calculations",
booktabs = T,
linesep = "\\addlinespace",
align = "lrrr") %>%
kable_styling() %>%
pack_rows("Analysis match", 1, r1) %>%
pack_rows("Error", r1+1, r2) %>%
pack_rows("Adjusted for multiple comparisons", r2+1, r3) %>%
pack_rows("Justification for chosen effect size", r3+1, r4) %>%
kable_styling(latex_options = "striped") %>%
add_footnote("Some articles provided more than one justification for their chosen sample size, and thus the sum of the percentages exceeds 100%.", notation = "none", threeparttable = T)
# Chunk 15: kappa
inter_rater <- function(df, variables, prescreen_questions){
# Initialize an empty list to store results
kappa_results <- data.frame(matrix(nrow = length(variables), ncol = 5))
colnames(kappa_results) <- c("k", "percent_agreed", "n_disagreed", "n_total", "n_categories")
rownames(kappa_results) <- variables
# Loop through each variable
for (var in variables) {
if(prescreen_questions == TRUE){
# Subset data for each coder and specific variable
data1 <- subset(df, coder == "RTT")[, var]
data2 <- subset(df, coder == "EZ")[, var]
} else {
data1 <- subset(df, coder_number == 1)[, var]
data2 <- subset(df, coder_number == 2)[, var]
}
# Combine into a matrix
combined_data <- matrix(c(data1, data2), ncol = 2)
# Calculate Cohen's Kappa
result <- kappa2(combined_data)
# Store the result in the list
kappa_results[[var, "k"]] <- result$value %>% round(2)
kappa_results[[var, "percent_agreed"]] <- (sum(data1 == data2, na.rm = TRUE) / result$subjects) %>% round(2)
kappa_results[[var, "n_disagreed"]] <- sum(data1 != data2, na.rm = TRUE)
kappa_results[[var, "n_total"]] <- result$subjects
kappa_results[[var, "n_categories"]] <- n_distinct(df[[var]])
}
return(kappa_results)
}
# select variables to calculate inter-rater agreement for when looking at all articles we assessed (both included and excluded articles). The variables it doesn't make sense to calculate agreement for are commented out.
variables1 <- c(
"id",
#  "coder",
#  "coder_text",
#  "coder_numer",
"pmcid",
"protocol",
"include"
)
kappa_include <- inter_rater(df, variables1, TRUE)
# identify ids for included articles
id_include <- df %>% filter(grepl("/", coder)) %>%
filter(include == "Include") %>%
select(id)
# remove excluded articles based on their id. This is necessary to calculate inter-rater agreement for the other variables.
df_kappa <- df %>% filter(id %in% id_include$id)
# now that I've removed the excluded articles, I can calculate inter-rater agreement for the variables coded for all included article. All these questions were answered before the survey allowed the coder to select the option "I don't have the expertise for this article".
# select variables to calculate inter-rater agreement for when looking at all included articles. The variables it doesn't make sense to calculate agreement for are commented out.
variables2 <- c(
"participants",
#  "participants_text",
"journal", # small difference in typing may result in different coding
#  "publisher", # recorded by one coder after all other coding was done (thus cannot calculate IRR)
"pub_year",
"impact_factor",
#  "verbatim",
"power_calc_type",
# "power_calc_type_text",
"multiple"
#  "stats_knowledge",
)
# Recode NAs to -100 in the "impact_factor" column
df_kappa$impact_factor <- ifelse(is.na(df_kappa$impact_factor), -100, df_kappa$impact_factor)
kappa_any_power_calc <- inter_rater(df_kappa, variables2, TRUE)
# return the impact factors to NA. I only needed them to be a number for the n_disagreement variable
# df$impact_factor <- ifelse(is.na(df$impact_factor), -100, df$impact_factor)
# identify ids for articles not solving for sample size
id_sample_size_calc <- df %>% filter(grepl("/", coder)) %>%
filter(power_calc_type == "Solves for sample size (often called a priori)") %>%
select(id)
# remove articles that don't solve for sample size based on their id. This is necessary to calculate inter-rater agreement for the other variables.
df_kappa <- df_kappa %>% filter(id %in% id_sample_size_calc$id)
# calculate inter-rater agreement for all relevant variables
# select variables to calculate inter-rater agreement for when looking only at articles with a sample size calculation. The variables it doesn't make sense to calculate agreement for are commented out.
variables3 <- c(
"version",
"version_text",
"power",
"power_text",
"alpha",
"alpha_text",
"sample_size",
"sample_size_text",
"effect_size_type",
#  "effect_size_type_other_standardized_text",
#  "effect_size_type_other_nonstandardized_text",
"effect_size_value",
"effect_size_value_text",
"stat_test",
#  "stat_test_other_regression_text",
#  "stat_test_other_nonregression_text",
#  "other_info_missing",
"reproducible",
#  "reproducible_text",
"justification",
"just_previous",
"just_pilot",
"just_convention",
"just_mcid",
"just_none",
"just_ref",
"just_other",
# "justification_text",
"mult_compare",
#  "mult_compare_text",
"anova_within_between",
"match",
#  "match_text",
"error"
#  "error_text",
#  "impact",
#  "comments_calc",
#  "comments_general",
#  "posthoc_resolving_notes"
)
kappa_sample_size_calc <- inter_rater(df_kappa, variables3, FALSE)
# merge all inter-rater agreement scores
kappa_all <- rbind(kappa_include,
kappa_any_power_calc,
kappa_sample_size_calc
)
kappa_all <- kappa_all %>%
mutate(percent_agreed = paste0(percent_agreed * 100, "%"))
# Chunk 16
knitr::kable(kappa_all,
caption = "Supplementary Table 2. Inter-rater agreement",
booktabs = T,
linesep = "\\addlinespace",
align = "lrrrrr",
col.names = c("Variable",
"Cohen's k",
"Percent agreed",
"n disagreed",
"n total",
"n categories"
)) %>%
kable_styling(latex_options = "striped") %>%
add_footnote("The variables are listed as they appear in the open data. See the data dictionary for a description of each variable. Cohen's kappa is mostly irrelevant for variables with a large number of categories, and can be ignored. Not all variables were relevant for all articles we coded; thus, 'n total' differs among the variables. 'justification was coded as a radio question with 7 options. We re-coded this variable into 7 binary variables and calculate the inter-rater agreement for each one.", notation = "none", threeparttable = T)
# Chunk 17: anova
filename <- paste0(getwd(), "/gpower_data_anovas_230919.csv")
raw_anova <- read_csv(filename, header = T)
df1$publisher %>% table()
df1$publisher %>% table() %>% arrange(decs())
rec <- read_csv("data\REC_data.csv", header = T)
library(tidyverse) # for cleaner code
library(knitr) # for kable function
library(kableExtra) # for kable table styling
library(irr) # for inter-rater agreement calculations
library(english) # to convert numbers to word equivalents via the function: words()
library(statpsych) # for the precision analysis
library(table1) # for making Table 1
rec <- read_csv("data/REC_data.csv", header = T)
getwd()
ls()
rec <- read_csv("data/REC_data.csv", header = T)
df1_anova <- bind_rows(df1_anova_original, df1_anova_new)
rec <- read_csv("data/REC_data.csv", header = T)
rec
rec <- read_csv("/data/REC_data.csv", header = T)
rec <- read_csv("/data/REC_data.csv")
getwd()
filename <- paste0(getwd(), "/gpower_data_anovas_230919.csv")
rec <- read_csv("/data/REC_data.csv")
rober\OneDrive\Documents\GitHub\gpower_23\data
setwe(/data)
setwd(/data)
setwd("/data")
cd("data")
filename <- paste0(getwd(), "/data/REC_data.csv")
filename
rec <- read_csv(filename, header = TRUE)
library(tidyverse) # for cleaner code
library(knitr) # for kable function
library(kableExtra) # for kable table styling
library(irr) # for inter-rater agreement calculations
library(english) # to convert numbers to word equivalents via the function: words()
library(statpsych) # for the precision analysis
library(table1) # for making Table 1
rec <- read_csv(filename, header = TRUE)
?read_csv
library(readr)
rec <- read_csv(filename, header = TRUE)
filename <- paste0(getwd(), "/data/REC_data.csv")
rec <- read_csv(filename, header = TRUE)
filename <- paste0(getwd(), "/data/REC_data.csv")
rec <- read_csv(filename, header = TRUE)
rec <- read.csv(filename, header = TRUE)
rec <- read_csv(filename)
rec <- read_csv(filename)
rec
rec(select(-c(database_link, database_number)))
rec <- read_csv(filename)
rec(select(-c(database_link, database_number)))
rec <- rec %>% (select(-c(database_link, database_number)))
filename <- paste0(getwd(), "/data/REC_data.csv")
rec <- read_csv(filename)
rec <- rec %>% (select(-c(database_link, database_number)))
rec %>% head
View(rec)
filename <- paste0(getwd(), "/data/REC_data.csv")
rec <- read_csv(filename)
filename <- paste0(getwd(), "/data/REC_data.csv")
rec <- read_csv(filename)
rec <- rec %>% (select(-c(database_link, database_number)))
View(rec)
rec$database_link
rec <- rec %>% select(-c(database_link, database_number))
us <- rec %>% filter(country == us)
us <- rec %>% filter(country == "us")
us <- rec %>% filter((country == "us") | !is.na(expenditure_rank))
filename <- paste0(getwd(), "/data/REC_data.csv")
rec <- read_csv(filename)
rec <- rec %>% select(-c(database_link, database_number))
us <- rec %>% filter((country == "us") | !is.na(expenditure_rank))
us <- rec %>% filter((country == "us") & !is.na(expenditure_rank))
table(us)
sum(us$smaple_size)
sum(us$sample_size)
sum(us$sample_size, na.rm = TRUE)
sum(us$calculation == 1, na.rm = TRUE)
length(us)
n_row(us)
n(us)
nrow(us)
sum(included == 1 & contacted == 0)
sum(us$included == 1 & us$contacted == 0)
us <- rec %>% filter(country == "us" & !is.na(expenditure_rank))
uk <- rec %>% filter(country == "uk" & !is.na(expenditure_rank))
sum(us$included == 1 & us$contacted == 1)
sum(us$included == 1 & us$contacted == 1 & available == "public"
)
sum(us$included == 1 & us$contacted == 1 & us$available == "public"
)
sum(us$included == 1 & us$contacted == 1 & us$availability == "public"
)
us$form_available
sum(us$included == 1 & us$contacted == 1 & us$form_available == "public")
sum(us$form_available == "private")
sum(us$form_available == "private", na.rm == T)
sum(us$form_available == "private", na.rm == T)
sum(us$form_available == "private"), na.rm == T
sum(us$form_available == "private"), na.rm = T
sum(us$form_available == "private", na.rm = T)
#Institutions contacted:
sum(us$contacted == T)
#Public forms identified
sum(us$included == 1 & us$contacted == 0)
#Private forms provided
sum(sum(us$form_available == "private", na.rm = T))
#Forms indicated as not available to share
sum(us$form_available == "declined")
#Forms indicated as not available to share
sum(us$form_available == "declined", na.rm = T)
#No response
sum(us$form_available == "noreply", na.rm = T)
#No response
sum(us$form_available == "noreply" | is.na(us$form_available))
rec_flowchart <- function(df){
flowchart <- data.frame(
item = c("Institutions sampled",
"Public forms identified",
"Institutions contacted",
"Public forms identified after contact",
"Private forms provided",
"Forms indicated as not available to share",
"No response"
),
values = c(nrow(df),
sum(df$included == 1 & df$contacted == 0),
sum(df$contacted == T),
sum(df$contacted == 1 | df$form_available == "public"),
sum(sum(df$form_available == "private", na.rm = T)),
sum(df$form_available == "declined", na.rm = T),
sum(df$form_available == "noreply" | is.na(df$form_available))
)
)
return(flowchart)
}
us_vals <- us %>% rec_flowchart()
us_vals
rec_flowchart <- function(df){
flowchart <- data.frame(
item = c("Institutions sampled",
"Public forms identified",
"Institutions contacted",
"Public forms identified after contact",
"Private forms provided",
"Forms indicated as not available to share",
"No response"
),
values = c(nrow(df),
sum(df$included == 1 & df$contacted == 0),
sum(df$contacted == T),
sum(df$contacted == 1 & df$form_available == "public"),
sum(sum(df$form_available == "private", na.rm = T)),
sum(df$form_available == "declined", na.rm = T),
sum(df$form_available == "noreply" | is.na(df$form_available))
)
)
return(flowchart)
}
us_vals <- us %>% rec_flowchart()
us_vals
flowchart <- data.frame(
item = c("Institutions sampled",
"Public forms identified",
"Institutions contacted",
"Public forms identified after contact",
"Private forms provided",
"Forms indicated as not available to share",
"No response"
),
values = c(nrow(df),
sum(df$included == 1 & df$contacted == 0),
sum(df$contacted == T),
sum(df$contacted == 1 & df$form_available == "public", na.rm = T),
sum(sum(df$form_available == "private", na.rm = T)),
sum(df$form_available == "declined", na.rm = T),
sum(df$form_available == "noreply" | is.na(df$form_available))
)
)
us_vals <- us %>% rec_flowchart()
us_vals
flowchart <- data.frame(
item = c("Institutions sampled",
"Public forms identified",
"Institutions contacted",
"Public forms identified after contact",
"Private forms provided",
"Forms indicated as not available to share",
"No response"
),
values = c(nrow(df),
sum(df$included == 1 & df$contacted == 0),
sum(df$contacted == T),
sum((df$contacted == 1) & (df$form_available == "public", na.rm = T)),
rec_flowchart <- function(df){
flowchart <- data.frame(
item = c("Institutions sampled",
"Public forms identified",
"Institutions contacted",
"Public forms identified after contact",
"Private forms provided",
"Forms indicated as not available to share",
"No response"
),
values = c(nrow(df),
sum(df$included == 1 & df$contacted == 0),
sum(df$contacted == T),
sum(df$contacted == 1 & df$form_available == "public", na.rm = T),
sum(sum(df$form_available == "private", na.rm = T)),
sum(df$form_available == "declined", na.rm = T),
sum(df$form_available == "noreply" | is.na(df$form_available))
)
)
return(flowchart)
}
us_vals <- us %>% rec_flowchart()
us_vals
rec_outcomes <- function(df){
outcomes <- data.frame(
item = c(
"Sample size",
"Justification",
"Calculation",
"Calculation (indirectly)"
),
values = c(
sum(us$sample_size, na.rm = TRUE),
sum(us$justificatoin, na.rm = TRUE),
sum(us$calculation == 1, na.rm = TRUE),
sum(us$calculation == 99, na.rm = TRUE)
)
)
return(outcomes)
}
us_outcomes <- rec_outcomes(us)
rec_outcomes <- function(df){
outcomes <- data.frame(
item = c(
"Sample size",
"Justification",
"Calculation",
"Calculation (indirectly)"
),
values = c(
sum(us$sample_size, na.rm = TRUE),
sum(us$justification, na.rm = TRUE),
sum(us$calculation == 1, na.rm = TRUE),
sum(us$calculation == 99, na.rm = TRUE)
)
)
return(outcomes)
}
us_outcomes <- rec_outcomes(us)
us_outcomes
uk_outcomes <- rec_outcomes(uk)
uk_outcomes
us_flowchart <- rec_flowchart(us)
uk_flowchart <- rec_flowchart(uk)
us_flowchart
uk_flowchart
rec_outcomes <- function(df){
outcomes <- data.frame(
item = c(
"Sample size",
"Justification",
"Calculation",
"Calculation (indirectly)"
),
count = c(
sum(df$sample_size, na.rm = TRUE),
sum(df$justification, na.rm = TRUE),
sum(df$calculation == 1, na.rm = TRUE),
sum(df$calculation == 99, na.rm = TRUE)
)
)
return(outcomes)
}
us_outcomes <- rec_outcomes(us)
uk_outcomes <- rec_outcomes(uk)
uk_outcomes
us_outcomes
us_flowchart
uk_flowchart
uk
rec_flowchart <- function(df){
flowchart <- data.frame(
item = c(
"Institutions sampled",
"Public forms identified",
"Institutions contacted",
"Public forms identified after contact",
"Private forms provided",
"Forms indicated as not available to share",
"No response"
),
count = c(
nrow(df),
sum(df$included == 1 & df$contacted == 0),
sum(df$contacted == T),
sum(df$contacted == 1 & df$form_available == "public", na.rm = T),
sum(sum(df$contacted == 1 & df$form_available == "private", na.rm = T)),
sum(df$form_available == "declined", na.rm = T),
sum(df$form_available == "noreply" | is.na(df$form_available))
)
)
return(flowchart)
}
rec_outcomes <- function(df){
outcomes <- data.frame(
item = c(
"Sample size",
"Justification",
"Calculation",
"Calculation (indirectly)"
),
count = c(
sum(df$sample_size, na.rm = TRUE),
sum(df$justification, na.rm = TRUE),
sum(df$calculation == 1, na.rm = TRUE),
sum(df$calculation == 99, na.rm = TRUE)
)
)
return(outcomes)
}
us_flowchart <- rec_flowchart(us)
uk_flowchart <- rec_flowchart(uk)
us_outcomes <- rec_outcomes(us)
uk_outcomes <- rec_outcomes(uk)
uk_flowchart
